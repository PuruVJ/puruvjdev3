{"title":"React TypeScript Hooks issue when returning array","description":"React and TypeScript make up a great pair. But when you're trying to make your own hooks, and returning an array, TypeScript yells at your. Find out why.","date":"19 Feb, 2021","series":"Get to know TypeScript","cover_image":"media/blog-social-intro.png","body":"<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60e.svg\"></a><br><a> Part 3 - React TypeScript Hooks issue when returning array (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/segregate-array-return-types-react-batman-robin/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/segregate-array-return-types-react-batman-robin.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>React and TypeScript make for a mean pair. Combined, they can rule the whole world together. But sometimes, these two can get off on a tangent about some small details, and we the devs have to be the scapegoat in their battle of egos. One such problem is when we're making our own custom hooks, which return an array of a value and a function, just like <code>useState</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #A6ACCD\">state</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> setState</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">null</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>It's clearly visible that <code>state</code> is a value, and <code>setState</code> is a function. When you use this hook, everything works out fine, and these 2 have their own types on them.</p>\n<p>But the issue happens when you're trying to make your own hook that returns an array, very similar in structure to <code>useState</code>. Let's see an example:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">useState</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">react</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">useTheme</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #A6ACCD\">theme</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">setTheme</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">useState</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">light</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95\">// Do epic stuff here</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95\">// Return the 2 state variables</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> [</span><span style=\"color: #A6ACCD\">theme</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">setTheme</span><span style=\"color: #F07178\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we have a <code>useTheme</code> hook, which manages our theme switching magic. Here, we declare state variables, <code>theme</code>, with its setter <code>useTheme</code>. Then we do some Web dev kung fu in using these 2 variables. Lastly we're returning an array of <code>[theme, setTheme]</code>, so we can utilise the theme and change it from anywhere. All fine.</p>\n<p><strong>Until you try to use this hook <img class=\"emoji\" draggable=\"false\" alt=\"😈\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f608.svg\"></strong></p>\n<p>Let's say you're writing a component whose job is to switch the theme, and it uses our <code>useTheme</code> hook to do it.</p>\n<p>You create a function to change the theme using <code>setTheme</code> exported from this hook:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #A6ACCD\">theme</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> setTheme</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">useTheme</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> toggleTheme </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">setTheme</span><span style=\"color: #A6ACCD\">(theme </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">light</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">dark</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">light</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And you run into a weird error:</p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/segregate-array-return-types-react-error-array-type/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/segregate-array-return-types-react-error-array-type.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>The error according to TypeScript is:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">This expression is not callable.\nNot all constituents of type 'string | Dispatch&lt;SetStateAction&lt;string&gt;&gt;' are callable.\nType 'string' has no call signatures.ts(2349)\n</span></span></code></pre>\n<p>That's weird. Why is that happening?</p>\n<h1 id=\"(TLDR)-Solution\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#(TLDR)-Solution\">#</a>(TLDR) Solution</h1>\n<p>Before I jump into the explanation, here's the final solution directly.</p>\n<h2 id=\"Option-1\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Option-1\">#</a>Option 1</h2>\n<p>Make this function's return type a <mark>Tuple</mark>(See the section below for the explanation).</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">useState</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">useEffect</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">react</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">TTheme</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">light</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">dark</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">useTheme</span><span style=\"color: #89DDFF\">():</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">Dispatch</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #FFCB6B\">SetStateAction</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">...</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will return a Tuple instead of an Array, so every element will have its own separate type. The error will be resolved</p>\n<h2 id=\"Option-2\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Option-2\">#</a>Option 2</h2>\n<p>This is the less verbose way, and I prefer this one over the 1st one.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">useState</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">useEffect</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">react</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">TTheme</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">light</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">dark</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">useTheme</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> [</span><span style=\"color: #A6ACCD\">theme</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">setTheme</span><span style=\"color: #F07178\">] </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>as const</code> here might look weird, but it's perfectly valid. In this case, it makes TypeScript infer the array being returned as a <code>readonly</code> tuple. This will work perfectly.</p>\n<h1 id=\"Explanation\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Explanation\">#</a>Explanation</h1>\n<p>If you see closely, the type of <code>setTheme</code> here is showed as</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">string </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">Dispatch</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">SetStateAction</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">string</span><span style=\"color: #89DDFF\">&gt;&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But that's weird. We clearly know that <code>setTheme</code> is a function. If you hover over it in your editor, you can confirm it's type is <code>React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;</code>, it doesn't have any <code>string</code> type as a constituent.</p>\n<p>But wait, that's not it. If you hover over <code>theme</code>, it's type is the same as <code>setState</code> above.</p>\n<p>And when you hover over <code>useTheme</code>, you find that it returns an Array of the type above <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">(string </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">Dispatch</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">React</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">SetStateAction</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">string</span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #A6ACCD\">)[]</span></span>\n<span class=\"line\"></span></code></pre>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/segregate-array-return-types-react-confusion/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/segregate-array-return-types-react-confusion.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>This is weird. How can we have TypeScript separate the types for each item?</p>\n<p>Answer here is tuples.</p>\n<h2 id=\"Tuples-in-TypeScript\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Tuples-in-TypeScript\">#</a>Tuples in TypeScript</h2>\n<p>Tuples look exactly like Arrays. Here's an Array:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">true</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's a tuple:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">[</span><span style=\"color: #F78C6C\">2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">hello</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">true</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The difference between the two? 1st one's type, as inferred by TypeScript, is <code>(number | string | boolean)[]</code>, while second one's type inference is <code>[number, string, boolean]</code>. In the Array example, TypeScript is assigning the same type to every single item, because technically, that's the definition of an Array.</p>\n<blockquote>\n<p>An array is a data structure that contains a group of elements. <strong>Typically these elements are all of the same data type, such as an integer or string.</strong></p>\n</blockquote>\n<p>All are of same types. That's why TypeScript assigns same type to every single element, by combining all possible types from the array elements using union type operator(<code>|</code>).</p>\n<p>Tuples, on the other hand, are ordered pair. That means, in the order you define the types, that's the order you enter them into a tuple. So TypeScript infers them correctly, based on the array index.</p>\n<h2 id=\"Defining-a-tuple-type\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Defining-a-tuple-type\">#</a>Defining a tuple type</h2>\n<p>This is simple. Just specify the types in the order they appear.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> coordinates</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #F78C6C\">23.4</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">43.67</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Simple, right :)</p>\n<h1 id=\"Conclusion\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--react-hooks-return-array-issue#Conclusion\">#</a>Conclusion</h1>\n<p>So this is the end of this article. Hope you got something good away from it.</p>\n<p>Signing off.</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60e.svg\"></a><br><a> Part 3 - React TypeScript Hooks issue when returning array (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\">)</a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--mindblowing-typescript-tricks\">Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"> TypeScript tricks</a><br>\n      </p>\n    </blockquote><p></p>\n","id":"get-to-know-typescript--react-hooks-return-array-issue","reading_time":4.335,"toc":[{"indent":0,"id":"","title":"(TLDR) Solution","length":15},{"indent":1,"id":"","title":"Option 1","length":8},{"indent":1,"id":"","title":"Option 2","length":8},{"indent":0,"id":"","title":"Explanation","length":11},{"indent":1,"id":"","title":"Tuples in TypeScript","length":20},{"indent":1,"id":"","title":"Defining a tuple type","length":21},{"indent":0,"id":"","title":"Conclusion","length":10}]}