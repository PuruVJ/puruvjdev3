{"cover_image":"media/promisify-callbacks-in-nodejs-promises-everywhere.jpg","title":"Bye bye Callbacks, hello Promises in NodeJS","date":"2021-01-24T18:30:00.000Z","description":"Completely get rid of callbacks in NodeJS and replace them with the great Promises.","body":"<p><img src=\"\" alt=\"Promise, promises everywhere\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;--padding-top: 55.58333333333333%;\">\n    <picture>\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/small.jpg\">\n      <img alt=\"Promise, promises everywhere\" data-src=\"../media/promisify-callbacks-in-nodejs-promises-everywhere/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>These is gonna be a meme-tastic blog post. Strap yourself in.</p>\n<p>So, I guess you read the [super]clickbaity title, and couldn't resist it, huh? Well, no worries, I <strong>promise</strong> you <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f601.svg\"> this is gonna be good.</p>\n<h1 id=\"History-lesson\"><a class=\"heading-link\" href=\"#History-lesson\">#</a>History lesson <img class=\"emoji\" draggable=\"false\" alt=\"😴\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f634.svg\"></h1>\n<p>NodeJS initially shipped with callbacks for its amazing asynchronous model which made it an overnight star in the first place. And callbacks were cool. You could read a huge file, and write the code in such a way to simply wait for the response to come out. This applied to database reads, XHR calls(ajax). This model was groundbreaking when it came out.</p>\n<p>Callbacks follow this pattern <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #82AAFF\">callback</span><span style=\"color: #A6ACCD\">(param1</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> param2</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> param3</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> (error</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> data)) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95\">// Do something</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Note, there can be any number of parameters before the actual callback as the last parameter, and the callback doesn't have to have only <code>data</code> either, it can be any number of parameters, or not have any, other than the <code>error</code>.</p>\n<p>But there's a funny thing that happens when you dive super deep into something. <strong>YoU fInD oUt ItS fLaWs.</strong> <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">fs</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">readdir</span><span style=\"color: #A6ACCD\">(source</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> files</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Error finding files: </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">else</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #A6ACCD\">files</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">forEach</span><span style=\"color: #F07178\">(</span><span style=\"color: #C792EA\">function</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">fileIndex</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #82AAFF\">gm</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">source</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">size</span><span style=\"color: #F07178\">(</span><span style=\"color: #C792EA\">function</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">values</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">          </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Error identifying file size: </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">else</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">          </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\"> : </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">values</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">          </span><span style=\"color: #A6ACCD\">aspect</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">values</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">width</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">values</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">height</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">          </span><span style=\"color: #A6ACCD\">widths</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">forEach</span><span style=\"color: #F07178\">(</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">            </span><span style=\"color: #C792EA\">function</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">width</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">widthIndex</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">              </span><span style=\"color: #A6ACCD\">height</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">Math</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">round</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">width</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">/</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">aspect</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">              </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">resizing </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">to </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">height</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">x</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">height</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">              </span><span style=\"color: #89DDFF\">this.</span><span style=\"color: #82AAFF\">resize</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">width</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">height</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">write</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">dest</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">w</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">width</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">_</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">filename</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">                </span><span style=\"color: #89DDFF\">if</span><span style=\"color: #F07178\"> (</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">) </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Error writing file: </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">              </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">            </span><span style=\"color: #89DDFF\">}.</span><span style=\"color: #82AAFF\">bind</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">this</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">          )</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">        </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Oh boy, my eyes bleed <img class=\"emoji\" draggable=\"false\" alt=\"🙈\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f648.svg\"></p>\n<p>I guess this twitter meme was on point <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f447.svg\"></p>\n<p><img src=\"\" alt=\"Goku pushing callbacks\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"../media/promisify-callbacks-in-nodejs-goku-meme/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"../media/promisify-callbacks-in-nodejs-goku-meme.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<h1 id=\"Enter-promises\"><a class=\"heading-link\" href=\"#Enter-promises\">#</a>Enter promises</h1>\n<p>Promises radicalized the whole scene. They made our code even cleaner. They follow a much simpler structure. No need for all that indentation inside indentation inside indentation. Max to max 1 level of indentation is needed</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> finalData </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">https://api.example/com</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">then</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">req</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> req</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">json</span><span style=\"color: #A6ACCD\">())</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">then</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">data</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">cleanUpData</span><span style=\"color: #A6ACCD\">(data))</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">then</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">data</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">doEpicShit</span><span style=\"color: #A6ACCD\">(data))</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Using the <code>.then</code> pattern made life super easy.</p>\n<p>And then came <mark>async/await</mark>. Above code became even simpler:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> req </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">https://api.example.com</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> data </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> req</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">json</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> finalData </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">cleanUpData</span><span style=\"color: #A6ACCD\">(data)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">doEpicShit</span><span style=\"color: #A6ACCD\">(finalData)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So flat <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f607.svg\"></p>\n<h1 id=\"Callback-to-Promise\"><a class=\"heading-link\" href=\"#Callback-to-Promise\">#</a>Callback to Promise</h1>\n<p>Converting callbacks to promises in NodeJS is very simple. If you're using <code>fs.readdir</code>.</p>\n<p>We'll redefine it:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> readdirPromise </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">folderPath</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Promise</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">resolve</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> reject</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">fs</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">readdir</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">folderPath</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">filenames</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">      </span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">reject</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">err</span><span style=\"color: #F07178\">) </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">resolve</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">filenames</span><span style=\"color: #F07178\">)</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    )</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Just do it for every single function <img class=\"emoji\" draggable=\"false\" alt=\"😉\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f609.svg\"></p>\n<p><strong>NOTE</strong>: The above part was a joke. You don't need to redefine every single callback function like that.</p>\n<h2 id=\"Serious-way...\"><a class=\"heading-link\" href=\"#Serious-way...\">#</a>Serious way...</h2>\n<p>Since Node 8, there's been a built-in helper function into Node, called <code>promisify</code>. It's the easiest way to promisify your callbacks. Check it out <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> promisify </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">require</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">util</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> callbackP </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">promisify</span><span style=\"color: #A6ACCD\">(callback)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">callbackP</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>That's it. Just pass your callback to <code>promisify</code>, and it will magically be <code>.then</code>able and <code>await</code>able.</p>\n<h1 id=\"About-filesystem-API...\"><a class=\"heading-link\" href=\"#About-filesystem-API...\">#</a>About filesystem API...</h1>\n<p>Most of the time, you'll end up needing promisification for the <code>fs</code> API in NodeJS. But there's a good news. <code>fs</code> <strong>already ships with promise based version of its functions</strong>.</p>\n<p>Check out my article to know this uncanny art: <a href=\"https://puruvj.dev/blog/fs-promises\" target=\"_blank\" rel=\"noopener\">Simple code with fs.promises and async await</a>.</p>\n<p>Hope you got something good out of it <img class=\"emoji\" draggable=\"false\" alt=\"😇\" src=\"https://twemoji.maxcdn.com/v/13.1.0/svg/1f607.svg\">.</p>\n<p>Thank you for reading.</p>\n","id":"promisify-callbacks-in-nodejs","reading_time":4.455,"toc":[{"indent":0,"id":"History-lesson","title":"#History lesson 😴 [https://twemoji.maxcdn.com/v/13.1.0/svg/1f634.svg]","length":70},{"indent":0,"id":"Enter-promises","title":"#Enter promises","length":15},{"indent":0,"id":"Callback-to-Promise","title":"#Callback to Promise","length":20},{"indent":1,"id":"Serious-way...","title":"#Serious way...","length":15},{"indent":0,"id":"About-filesystem-API...","title":"#About filesystem API...","length":24}],"seriesIndex":0}