{"title":"Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"/> TypeScript tricks","description":"There's a lot about TypeScript that most people don't know. I'll surface some of the \"unknown\" stuff in this blog post.","date":"19 Mar, 2021","cover_image":"media/mindblowing-typescript-tricks--cover.jpg","series":"Get to know TypeScript","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 66.66666666666666%;background-color: rgb(73, 15, 114)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/mindblowing-typescript-tricks--cover/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/mindblowing-typescript-tricks--cover/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/mindblowing-typescript-tricks--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/mindblowing-typescript-tricks--cover/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/mindblowing-typescript-tricks--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a> Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"> TypeScript tricks (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n<p>Apologies for the clickbaity title <img class=\"emoji\" draggable=\"false\" alt=\"🙃\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f643.svg\">. But it is in good faith, cuz I'm gonna introduce you to some TypeScript related tricks that are bound to blow your mind to pieces. And if you can read the whole post without feeling wonder at any trick, great for you!! You're TypeScript pro already <img class=\"emoji\" draggable=\"false\" alt=\"🥳\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f973.svg\"></p>\n<p>So let's cut to the chase.</p>\n<h1 id=\"A-little-note...\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#A-little-note...\">#</a>A little note...</h1>\n<p>The level of this article is <strong>Advanced</strong>. You may not understand how things work. However, you don't have to. You only have to copy paste the snippet, and understand how to use it, as these will make your life easy, and overtime, you'll get the know-how of how these actually work.</p>\n<h1 id=\"In-built-types\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#In-built-types\">#</a>In-built types <img class=\"emoji\" draggable=\"false\" alt=\"🥱\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f971.svg\"></h1>\n<p>These are some of the built-in helper types in TypeScript. I'll keep this section short, as you can read about these anywhere. A good starting point would be <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\" target=\"_blank\" rel=\"noopener\">TypeScript Docs</a> Then we'll get to the juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60b.svg\"></p>\n<h2 id=\"Pick\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Pick\">#</a>Pick</h2>\n<p>It allows to pick specific fields from a type/interface, along with their types and create a brand new type. Let's take a look at this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">non-binary</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">prefer-not-to-say</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">dob</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Date</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">NameAndGenderOnly</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Pick</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">gender</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">// This is equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">NameAndGenderOnly</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">non-binary</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">prefer-not-to-say</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See!?! The same types, without any duplication.</p>\n<h2 id=\"Partial\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Partial\">#</a>Partial</h2>\n<p>This is the most used type of mine. If you have a type/interface, and for some reason, you wanna make <strong>all</strong> its fields optional, this is it <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">non-binary</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">prefer-not-to-say</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">dob</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Date</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">OptionalUserFields</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Partial</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">// This is equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">OptionalUserFields</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">non-binary</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">prefer-not-to-say</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">dob</span><span style=\"color: #89DDFF\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Date</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Readonly\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Readonly\">#</a>Readonly</h2>\n<p>This is very useful, when you wanna make sure that an object's properties can't be changed in your code. Think of it as a <code>const</code> for your object properties.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">female</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">non-binary</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">prefer-not-to-say</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">dob</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Date</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> userData</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Readonly</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">UserFields</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">id</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">100</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Puru Vijay</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">gender</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">male</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">dob</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Date</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">12 Nov, 2001</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Trying to modify any property like <code>userData.name = 'Hoolalala'</code> will result in error.</p>\n<h2 id=\"Record\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Record\">#</a>Record</h2>\n<p>Now we are getting to the good stuff. I've had a new-found respect for <code>Record</code> recently, while working on my current project <a href=\"https://macos.now.sh\" target=\"_blank\" rel=\"noopener\">macos.now.sh</a> (<strong>Shameless Plug</strong>, It's basically a macOS Big Sur clone written in Preact and Vite).</p>\n<p>Take a look at this <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">AppName</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">finder</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">launchpad</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">safari</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">messages</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">mail</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">maps</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">photos</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">facetime</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">calendar</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">/** Which apps are currently open */</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> openApps</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Record</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">AppName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">boolean</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">finder</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">launchpad</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">safari</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">messages</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">mail</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">maps</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">photos</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">facetime</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">calendar</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, this is just a simple key-value pair. But I wanted to enforce that this object contains all the apps listed in the <code>AppName</code> union type, and that all the values are boolean only. I also wanted to be presented with an error if I add a new app to the list, which would make me add that app's key value pair to this <code>openApps</code> object.</p>\n<p>This is where <code>Record</code> comes in. It's simply a way to enforce the types of the keys as well as values. Another layer of safety that TypeScript adds.</p>\n<h1 id=\"Juicy-stuff\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Juicy-stuff\">#</a>Juicy stuff <img class=\"emoji\" draggable=\"false\" alt=\"😋\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60b.svg\"></h1>\n<p>Now the fun part begins.</p>\n<h2 id=\"Retrieve-element-type-from-Array\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Retrieve-element-type-from-Array\">#</a>Retrieve element type from Array</h2>\n<p>Suppose you have an Array, and you wanna extract the type of each Element from an array</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #FFCB6B\">ArrayType</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">readonly</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">unknown</span><span style=\"color: #A6ACCD\">[]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayType</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">readonly</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #89DDFF\">infer</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ElementType</span><span style=\"color: #A6ACCD\">)[] </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ElementType</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">never</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We're using TypeScript's <code>infer</code> here, which helps pick out specific types from a complex type.</p>\n<p>Here's how to use it:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">A</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\">[]</span><span style=\"color: #89DDFF\">&gt;;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// string</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">B</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">readonly</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\">[]</span><span style=\"color: #89DDFF\">&gt;;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// string</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">C</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">&gt;;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// string | number</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">D</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">foo</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">bar</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">&gt;;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// \"foo\" | \"bar\"</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">E</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #FFCB6B\">P</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Q</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">R</span><span style=\"color: #A6ACCD\">)[]</span><span style=\"color: #89DDFF\">&gt;;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #676E95\">// P | Q | R</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Error1</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;{</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">}&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">//                         ^^^^^^^^^^^^^^^^</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">// Error: Type '{ name: string; }' does not satisfy the constraint 'readonly unknown[]'.</span></span>\n<span class=\"line\"></span></code></pre>\n<p>There's a bit simpler version to get the element type.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayElement</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">ArrayType</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">readonly</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">unknown</span><span style=\"color: #A6ACCD\">[]</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ArrayType</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"Retrieve-type-from-a-promise\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Retrieve-type-from-a-promise\">#</a>Retrieve type from a promise</h2>\n<p>Ever wanted to retrieve type from a function that returns a promise? You might've tried this:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">returnsPromise</span><span style=\"color: #89DDFF\">():</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Promise</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">let</span><span style=\"color: #A6ACCD\"> num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">typeof</span><span style=\"color: #A6ACCD\"> returnsPromise</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">//       ^^^^^^^^^^^^^^^^^^^^^</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">// num: () =&gt; Promise&lt;number&gt;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>We want <code>num</code>'s type to be the returned type of the promise(in this case <code>number</code>), and the above solution definitely didn't work.</p>\n<p>The solution is to once again use <code>infer</code> to retrieve the type from the promise:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UnwrapPromise</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">any</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">PromiseLike</span><span style=\"color: #89DDFF\">&lt;infer</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">U</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">U</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">PromiseLike</span><span style=\"color: #89DDFF\">&lt;infer</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #89DDFF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">K</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>usage:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">returnsPromise</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">any</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #FFCB6B\">Promise</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">resolve</span><span style=\"color: #F07178\">(</span><span style=\"color: #F78C6C\">6</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> num</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UnwrapPromise</span><span style=\"color: #89DDFF\">&lt;typeof</span><span style=\"color: #A6ACCD\"> returnsPromise</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">8</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">//    num: number</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we wrapped a function that returns a promise into this type. This works directly with a regular <code>Promise&lt;unknown&gt;</code> type too.</p>\n<blockquote>\n<p><strong>Why <code>PromiseLike</code> instead of <code>Promise</code>?</strong> <br>\n<br></p>\n<p><code>Promise</code> interface comes with lot of pre-built methods exclusive to promises. But sometimes, you wanna create functions that return a <code>.then</code> just like Promises, but not have all the properties that <code>Promise</code>s do. In that case, we use <code>PromiseLike</code></p>\n</blockquote>\n<p>Aside: You could rename <code>UnwrapPromise</code> to be <code>BreakPromise</code>. Doesn't affect the code, but its good for laughs <img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f923.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"🤣\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f923.svg\"></p>\n<h2 id=\"Turning-a-tuple-into-union-types\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Turning-a-tuple-into-union-types\">#</a>Turning a tuple into union types</h2>\n<p>This is a tuple:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> alphabets </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Note: Without <code>as const</code> at the end, typescript will interpret the type as <code>string[]</code>, not as a tuple</p>\n</blockquote>\n<p>Now we want to use these specific strings as union types. Easy peasy.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Alphabet</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will do. But let's assume that this type and the array above are gonna end up in different files, and the project grows quite big, then you come back a few months later, and add another value <code>e</code> to the <code>alphabets</code> variable, and BOOM!!! The whole codebase breaks, because you forgot to add <code>e</code> in the <code>Alphabet</code> union type.</p>\n<p>We can automate the <code>Alphabet</code> union type generation, in such a way that it pulls its members directly from <code>alphabets</code> variable.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Alphabet</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">typeof</span><span style=\"color: #A6ACCD\"> alphabets[number]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's the universal type safe helper:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UnionFromTuple</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">Tuple</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">readonly</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">boolean</span><span style=\"color: #A6ACCD\">)[]</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Tuple</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Usage:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> alphabets </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">a</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">b</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">c</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">d</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Alphabet</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">UnionFromTuple</span><span style=\"color: #89DDFF\">&lt;typeof</span><span style=\"color: #A6ACCD\"> alphabets</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">//  type Alphabet = 'a' | 'b' | 'c' | 'd'</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p><strong>Why <code>readonly array</code>?</strong> <br>\n<br>\nThis section is about Tuple to Union types, but in the code itself we haven't used the word <code>tuple</code>. The reason is that tuple isn't a keyword. As far as TypeScript is concerned, a <code>readonly Array</code> is a tuple. There's no <code>Tuple</code> type or anything. That's why I'm making sure the type passed to <code>UnionFromTuple</code> is a tuple, not an array. If its an array, its basically the same as the section above where we retrieved the element type from an array</p>\n</blockquote>\n<h2 id=\"Union-types-from-object\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#Union-types-from-object\">#</a>Union types from object</h2>\n<p>Let's say we have this object:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> openApps </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">finder</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">launchpad</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">safari</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">messages</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">mail</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">maps</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">photos</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">facetime</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">calendar</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And I want to create a union type that's based on the keys specified here. If I add an extra key-value pair to this object, I want the union type to include that too.</p>\n<p>Here's the solution:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">KeysOfObject</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #FFCB6B\">K</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">in</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">unknown</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">}&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">keyof</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">T</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Usage<img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">App</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">KeysOfObject</span><span style=\"color: #89DDFF\">&lt;typeof</span><span style=\"color: #A6ACCD\"> openApps</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This will be equal to <img class=\"emoji\" draggable=\"false\" alt=\"👇\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">App</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">finder</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">launchpad</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">safari</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">messages</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">mail</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">maps</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">photos</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">facetime</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">calendar</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"A-better-Object.Keys\"><a class=\"heading-link\" href=\"blog/get-to-know-typescript--mindblowing-typescript-tricks#A-better-Object.Keys\">#</a>A better Object.Keys</h2>\n<p>Looking the article, it seems like its a compilation of Helper Types, which is the case. But in this one, I'm gonna share a tip which isn't the most mind-blowing or the coolest. Its pretty boring, but the important thing is that it's the most MOST useful tip in this whole article. If you have to take something away from this article, take this. Ignore the whole article except for this part.</p>\n<p>Let's look the object from before:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> openApps </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">finder</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">launchpad</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">safari</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">messages</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">mail</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">maps</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">photos</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">facetime</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">calendar</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FF9CAC\">false</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Say I wanna apply <code>Object.keys</code> to get an array of the keys of this object.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> apps </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Object</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">keys</span><span style=\"color: #A6ACCD\">(openApps)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">// &nbsp;[\"finder\", \"launchpad\", \"safari\", \"messages\", \"mail\", \"maps\", \"photos\", \"facetime\", \"calendar\"]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But there's bit of a problem here. If you hover over <code>apps</code>, its type will be <code>string</code>[]. Not <code>(\"finder\" | \"launchpad\" | \"safari\" | \"messages\" | \"mail\" | \"maps\" | \"photos\" | \"facetime\" | \"calendar\")[]</code>.</p>\n<p>Its not exactly a <strong>problem</strong>, per se, but it would be great to have <code>Object.keys</code> return the union types array of the keys.</p>\n<p>So let's investigate the issue. We'll start with <code>Object.keys</code> definition in pre-built <code>lib.d.ts</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ObjectConstructor</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">  </span><span style=\"color: #676E95\">//...</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">keys</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">o</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">object</span><span style=\"color: #89DDFF\">):</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\">[]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">keys</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">o</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{}):</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\">[]</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>If you find it weird that <code>keys</code> is defined twice, its called <mark>Function/Method overloading</mark>. You can basically define multiple function declarations for flexible usage.</p>\n</blockquote>\n<p>As you can see, its hard coded to always return <code>string[]</code>. I'm sure its there for good reasons, but its quite inconvenient for me, so I'm gonna override this method to infer the keys correctly from what it is passed.</p>\n<p>If you have a root <code>.d.ts</code> file in your project, put the snippet below right in it.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ObjectKeys</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">Obj</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Obj</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">object</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #89DDFF\">keyof</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Obj</span><span style=\"color: #A6ACCD\">)[]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Obj</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> []</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Obj</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">extends</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Array</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">any</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">string</span><span style=\"color: #A6ACCD\">[]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">never</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ObjectConstructor</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #F07178\">keys</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">ObjectType</span><span style=\"color: #89DDFF\">&gt;(</span><span style=\"color: #A6ACCD\">o</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ObjectType</span><span style=\"color: #89DDFF\">):</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">ObjectKeys</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #FFCB6B\">ObjectType</span><span style=\"color: #89DDFF\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now let's try the code above with the new <code>Object.keys</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> apps </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Object</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">keys</span><span style=\"color: #A6ACCD\">(openApps)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #676E95\">// const apps: (\"finder\" | \"launchpad\" | \"safari\" | \"messages\" | \"mail\" | \"maps\" | \"photos\" | \"facetime\" | \"calendar\")[]</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Don't trust me? Check it out yourself @ <a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBA8gRgKwgY2AaQiAzgHnggPigF5ZEoIAPYCAOwBMsoB7RFYAKCigH4oAKANaZmAMzIIAlAG0AulygAuCRWp1GUWgFcAtnAgAnBXzkLl+VTQZMAggYMBDEDge0QRAD5QswAwEtaAHNjb18AwNNuZVoIADdDAG4ODgCaA1EHZGh8dgBhZlofAy1UZgMoAG8FYWw8NlQAFXAIAn5mc3rgJshJDqRUDFqcxuaCJIBfZOQCnxZIWhswMCZSKu5RAPpDZQyAGywIABoFXYctWmQACzAHeh2HfaOFLAcM-3vH4+4dCCwXwN+HwOXygOgcfl2QKe3wcyyhILAl2YwGYWHhCgyWWAfh+6O4yAe6gcBnR4ySHGmhWAUFhyxIEnYADoalg2vNFstJEkgA\" target=\"_blank\" rel=\"noopener\">TypeScript Playground</a></p>\n<blockquote>\n<p>Note: All the credit goes to Steven Baumgeitner's blog post about this exact same thing. I just ripped it off <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\">. You can read more about fixing <code>Object.keys</code> on his <a href=\"https://fettblog.eu/typescript-better-object-keys/\" target=\"_blank\" rel=\"noopener\">blog post</a>.</p>\n</blockquote>\n<p>So, this is it!! Hope you got something out of this blog post!</p>\n<p>Signing off!!</p>\n<p class=\"series-links\"></p><blockquote>\n      <p>Get to know TypeScript series:</p>\n      <p>\n        <a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript-an-ode-to-typescript\">Part 1 - An Ode <img class=\"emoji\" draggable=\"false\" alt=\"❤\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/2764.svg\"> to TypeScript </a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--using-typescript-without-typescript\">Part 2 - Using TypeScript without TypeScript <img class=\"emoji\" draggable=\"false\" alt=\"😎\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60e.svg\"></a><br><a rel=\"noopener\" target=\"_blank\" href=\"/blog/get-to-know-typescript--react-hooks-return-array-issue\">Part 3 - React TypeScript Hooks issue when returning array</a><br><a> Part 4 - Mindblowing <img class=\"emoji\" draggable=\"false\" alt=\"🤯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"> TypeScript tricks (You're reading it <img class=\"emoji\" draggable=\"false\" alt=\"😁\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f601.svg\">)</a><br>\n      </p>\n    </blockquote><p></p>\n","id":"get-to-know-typescript--mindblowing-typescript-tricks","reading_time":12.12,"toc":[{"indent":0,"id":"","title":"A little note...","length":16},{"indent":0,"id":"","title":"In-built types 🥱","length":17},{"indent":1,"id":"","title":"Pick","length":4},{"indent":1,"id":"","title":"Partial","length":7},{"indent":1,"id":"","title":"Readonly","length":8},{"indent":1,"id":"","title":"Record","length":6},{"indent":0,"id":"","title":"Juicy stuff 😋","length":14},{"indent":1,"id":"","title":"Retrieve element type from Array","length":32},{"indent":1,"id":"","title":"Retrieve type from a promise","length":28},{"indent":1,"id":"","title":"Turning a tuple into union types","length":32},{"indent":1,"id":"","title":"Union types from object","length":23},{"indent":1,"id":"","title":"A better Object.Keys","length":20}]}