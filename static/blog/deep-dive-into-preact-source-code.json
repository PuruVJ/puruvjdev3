{"title":"The Zen of Preact's source code","description":"Dive into Preact's source code and explore its simplicity","date":"23 April, 2021","cover_image":"media/deep-dive-preact-source--cover.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 75%;background-color: rgb(123, 166, 204)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/deep-dive-preact-source--cover/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/deep-dive-preact-source--cover/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/deep-dive-preact-source--cover/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/deep-dive-preact-source--cover/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/deep-dive-preact-source--cover/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<blockquote>\n<p><em>Artwork by <a href=\"https://unsplash.com/photos/GxymWkdnl4Y\" target=\"_blank\" rel=\"noopener\">Fernando Jorge</a></em></p>\n</blockquote>\n<p>Preact is [web dev]household name at this point. Almost every web developer who's been in tis business for longer than 2 years has heard of it and maybe even tried it themselves. And probably reached the same conclusion as me: <strong>It's awesome!! <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜»\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f63b.svg\"></strong>.</p>\n<p>So today, I'm gonna do a deep dive into Preact's source code, and remark on interesting things I find there.</p>\n<h1 id=\"What-is-Preact\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#What-is-Preact\">#</a>What is Preact?</h1>\n<p>In case you're not familiar, Preact is the <code>3Kb</code> alternative to the <code>42KB</code> of React, by <a href=\"https://twitter.com/_developit\" target=\"_blank\" rel=\"noopener\">Jason Miller</a>. It's fully compatible with React's API and supports all packages that rely on React. Its awesome that way.</p>\n<h1 id=\"Observations\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#Observations\">#</a>Observations</h1>\n<p>Before we look at the code, I'll remark on some things about Preact.</p>\n<h2 id=\"Written-in-TypeScript-but-not-quite...\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#Written-in-TypeScript-but-not-quite...\">#</a>Written in TypeScript, but not quite...</h2>\n<p>Preact source code is written in TypeScript, but the main files themselves aren't. The main files with the functionality are written in plain JavaScript, but they use <code>JSDoc</code> to pull in Types from TypeScript Definition files (.d.ts).</p>\n<p>An example:</p>\n<p>This is the <code>types.d.ts</code> file:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">RenamedType</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">null</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>And here's the JS file</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./types').RenamedType</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">a</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./types').RenamedType</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">b</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">returns</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">sum</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">a</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> b</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">a</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">b</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>As you can see, the JavaScript code is just that: JavaScript. You won't see TypeScript style type specified in it. Rather all type information is specified in comments, which are ignored completely. There's a whole article about <a href=\"https://puruvj.dev/blog/get-to-know-typescript--using-typescript-without-typescript\" target=\"_blank\" rel=\"noopener\">Using TypeScript without TypeScript</a>, but the TLDR; here would be: Avoid development time tooling. if its just plain JS, you don't need to run a file watcher to transpile files as you change them. Just run what you got. And you already got a TypeScript compiler running all the time without you explicitly running it: Your VSCode.</p>\n<p>This is a very interesting approach and I see more and more libraries take it up, especially non-UI libraries(For UI libraries, you already got a web server running, so adding in TypeScript in the tooling won't change much, go ahead and add TypeScript)</p>\n<h2 id=\"Very-well-written-code\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#Very-well-written-code\">#</a>Very well written code</h2>\n<p>I don't need to say this out loud really, but Preact's source code is very very well written and commented, as you'd expect from such a paramount framework.</p>\n<h2 id=\"It-reuses-itself-a-lot\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#It-reuses-itself-a-lot\">#</a>It reuses itself a lot</h2>\n<p>Yup. One of the reasons Preact is so small is that it reuses it's own exported function in its other exported functions. A LOTT!! I'll show you some places where this happens</p>\n<h1 id=\"Disclaimer\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#Disclaimer\">#</a>Disclaimer</h1>\n<p>This is not gonna be a complete breakdown, and won't be sequential. Preact is quite a big library to cover in a blog post, so I'll just cover the interesting parts</p>\n<p>So, let's begin!! We'll look at some interesting things in the <code>core</code> module(i.e., the one when you type <code>import {} from 'preact'</code>), then we'll got to hooks</p>\n<h1 id=\"Core-module\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#Core-module\">#</a>Core module</h1>\n<h2 id=\"index.js\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#index.js\">#</a>index.js</h2>\n<p>As is the tradition, lets start with the <code>index.js</code> file:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">render</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">hydrate</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./render</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">createElement</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">createElement</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">h</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">Fragment</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">createRef</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">isValidElement</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./create-element</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">Component</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./component</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">cloneElement</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./clone-element</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">createContext</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./create-context</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">toChildArray</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./diff/children</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">default</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">as</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">options</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./options</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Notable points: <code>h</code>, which is Preact's JSX factory, is actually named <code>createElement</code>. Just like <code>React.createElement</code>. But is exported as <code>h</code> because it allows you to write raw Preact(Without JSX) <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ‘‡\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f447.svg\"></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #82AAFF\">h</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">div</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F07178\">class</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">haha</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">},</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">h</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">span</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F07178\">key</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">34</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">},</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">h</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">h1</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{},</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">h</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">span</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{},</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">Whoa</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #A6ACCD\">))))</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Also it is notable that it exports <code>createElement</code> as it is too, to maintain compatibility with <code>React.createElement</code></p>\n<h2 id=\"create-element.js\"><a class=\"heading-link\" href=\"blog/deep-dive-into-preact-source-code#create-element.js\">#</a>create-element.js</h2>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">import</span><span style=\"color: #A6ACCD\"> options </span><span style=\"color: #89DDFF\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">./options</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * Create an virtual node (used for JSX)</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./internal').VNode[\"type\"]</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">type</span><span style=\"color: #676E95\"> The node name or Component</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * constructor for this virtual node</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">object | null | undefined</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #676E95\"> The properties of the virtual node</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">Array&lt;import('.').ComponentChildren&gt;</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">[</span><span style=\"color: #A6ACCD\">children</span><span style=\"color: #89DDFF\">]</span><span style=\"color: #676E95\"> The children of the virtual node</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">returns</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./internal').VNode</span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> */</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">createElement</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">type</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> props</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> children</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">...</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * Create a VNode (used internally by Preact)</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./internal').VNode[\"type\"]</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">type</span><span style=\"color: #676E95\"> The node name or Component</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * Constructor for this virtual node</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">object | string | number | null</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #676E95\"> The properties of this virtual node.</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * If this virtual node represents a text node, this is the text of the node (string or number).</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">string | number | null</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">key</span><span style=\"color: #676E95\"> The key for this virtual node, used when</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * diffing it against its children</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./internal').VNode[\"ref\"]</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">ref</span><span style=\"color: #676E95\"> The ref property that will</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * receive a reference to its created child</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">returns</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">import('./internal').VNode</span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> */</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">createVNode</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">type</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> props</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> key</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> ref</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> original</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">...</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">createRef</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> current</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Fragment</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">children</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * Check if a the argument is a valid Preact VNode.</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">*</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">vnode</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">returns</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">vnode is import('./internal').VNode</span><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> */</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> isValidElement </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">vnode</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> vnode </span><span style=\"color: #89DDFF\">!=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #A6ACCD\"> vnode</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">constructor </span><span style=\"color: #89DDFF\">===</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">undefined;</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>Omitted <code>createElement</code> and <code>createVNode</code> as they're quite big.</p>\n</blockquote>\n<p>Let me blow your mind. <code>ref</code>s in P/React are basically used to encapsulate values that shouldn't trigger re-renders and are not re-created on every re-render. Lets see how Preact defines it:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">createRef</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #F07178\"> current</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">null</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>A ref is just an object with <code>current</code> property set to <code>null</code>. It's always advertised as that, but I never thought that it's <strong>actually</strong> an object internally too.</p>\n<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <div class=\"gif-vid-container\">\n    <video autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\">\n      <source src=\"/media/deep-dive-preact-source--astonished-cat/vidgif.mp4\" type=\"video/mp4\">\n      Your browser doesn't support HTML5 video playback. <a href=\"/media/deep-dive-preact-source--astonished-cat.gif\" target=\"_blank\" rel=\"noopener\">See the gif here</a>\n    </video>\n  </div>\n  </div><p></p>\n<p>Next up, we have <code>Fragment</code>. Its also another astonishing thing.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">export</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Fragment</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">props</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">children</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Fragment, just returns its <code>children</code>. That's all! <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ¤¯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"><img class=\"emoji\" draggable=\"false\" alt=\"ðŸ¤¯\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f92f.svg\"></p>\n","id":"deep-dive-into-preact-source-code","reading_time":5.4975,"toc":[{"indent":0,"id":"","title":"What is Preact?","length":15},{"indent":0,"id":"","title":"Observations","length":12},{"indent":1,"id":"","title":"Written in TypeScript, but not quite...","length":39},{"indent":1,"id":"","title":"Very well written code","length":22},{"indent":1,"id":"","title":"It reuses itself a lot","length":22},{"indent":0,"id":"","title":"Disclaimer","length":10},{"indent":0,"id":"","title":"Core module","length":11},{"indent":1,"id":"","title":"index.js","length":8},{"indent":1,"id":"","title":"create-element.js","length":17}]}