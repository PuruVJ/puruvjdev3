{"title":"Simplify code by promisifying `setTimeout`","description":"Simplify and clean your codebase by making setTimeout more idiomatic using Promises","date":"28 Sep, 2020 2:34 PM","cover_image":"media/timer.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 56.25%;background-color: rgb(119, 57, 23)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/timer/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/timer/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/timer/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/timer/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/timer/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>Recently, when I was working on my practice project <a href=\"https://ms-todo.vercel.app\" target=\"_blank\" rel=\"noopener\">Microsoft Todo Clone</a>, I needed to implement code like this:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">#1 Do Task 1\n#2 Wait for 200ms\n#3 Do task 2\n#4 Wait for 200ms\n#5 Do Task 3\n</span></span></code></pre>\n<p>Notice <code>#2</code> and <code>#4</code>. They smell of <code>setTimeout</code> <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜–\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f616.svg\">. <code>setTimeout</code> takes in a callback, meaning there will be an indentation. Whenever those appear, means the code's gonna get ugly.</p>\n<p>So I wrote this code in JS</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #82AAFF\">doTask1</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">setTimeout</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #82AAFF\">doTask2</span><span style=\"color: #F07178\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #82AAFF\">setTimeout</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">()</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">    </span><span style=\"color: #82AAFF\">doTask3</span><span style=\"color: #F07178\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">},</span><span style=\"color: #F07178\"> </span><span style=\"color: #F78C6C\">200</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">},</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #F78C6C\">200</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Now you can see for yourself, this code SMELLS. BAD.</p>\n<p>The moment I wrote it, I knew it wouldn't work in long-term. What if I needed to an extra step of waiting and doing a Task #4? Or rearranging the order.</p>\n<p>So, I declared a utility function and it solved the problem completely.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">/**</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> * </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">param</span><span style=\"color: #676E95\"> </span><span style=\"color: #89DDFF\">{</span><span style=\"color: #FFCB6B\">number</span><span style=\"color: #89DDFF\">}</span><span style=\"color: #676E95\"> </span><span style=\"color: #A6ACCD\">time</span><span style=\"color: #676E95\"> Time to wait for in milliseconds</span></span>\n<span class=\"line\"><span style=\"color: #676E95\"> */</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">waitFor</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">time</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #89DDFF\">return</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #F07178\"> </span><span style=\"color: #FFCB6B\">Promise</span><span style=\"color: #F07178\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">resolve</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #F07178\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #F07178\"> </span><span style=\"color: #82AAFF\">setTimeout</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">resolve</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">time</span><span style=\"color: #F07178\">))</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we're returning a <code>Promise</code>, which resolves when the <code>setTimeout</code> function inside runs.</p>\n<p>It's usage would be as simple as</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">waitFor</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #F78C6C\">200</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>So the spaghetti code above could be rearranged like this:</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #82AAFF\">doTask1</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">waitFor</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #F78C6C\">200</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">doTask2</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">waitFor</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #F78C6C\">200</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">doTask3</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>See how simple it became? It reads exactly like the text version I wrote at the top. It's very idiomatic <img class=\"emoji\" draggable=\"false\" alt=\"ðŸ˜Ž\" src=\"https://twemoji.maxcdn.com/v/13.0.2/svg/1f60e.svg\">.</p>\n<h2 id=\"Shorter-code\"><a class=\"heading-link\" href=\"blog/flatten-settimeout#Shorter-code\">#</a>Shorter code</h2>\n<p>That code snippet could be simplified further</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> waitFor </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">time</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #FFCB6B\">Promise</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">resolve</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">setTimeout</span><span style=\"color: #A6ACCD\">(resolve</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #A6ACCD\"> time))</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n","id":"flatten-settimeout","reading_time":1.595,"toc":[{"indent":1,"id":"","title":"Shorter code","length":12}]}