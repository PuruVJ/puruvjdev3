{"title":"Web Workers: Intro and Basic Usage","description":"Have you ever heard this term \"Web Workers\" mentioned somewhere and wondered what the hell is this new thing? let me introduce you to this great tech.","date":"June 5, 2020 02:00","cover_image":"media/road-grey-asphalt.jpg","body":"<p><img src=\"\" alt=\"\" class=\"feature-image\" style=\"display: none;\"></p><div class=\"picture-container\">\n  <figure style=\"width: 100%;padding-top: 66.640625%;background-color: rgb(15, 23, 20)\">\n    <picture>\n      <source type=\"image/webp\" media=\"(min-width: 501px)\" data-srcset=\"media/road-grey-asphalt/large.webp\">\n      <source type=\"image/webp\" media=\"(max-width: 500px)\" data-srcset=\"media/road-grey-asphalt/small.webp\">\n      <source type=\"image/jpg\" media=\"(min-width: 501px)\" data-srcset=\"media/road-grey-asphalt/large.jpg\">\n      <source type=\"image/jpg\" media=\"(max-width: 500px)\" data-srcset=\"media/road-grey-asphalt/small.jpg\">\n      <img alt=\"Placeholder\" data-src=\"media/road-grey-asphalt/large.jpg\" class=\"lazyload blog-img\">\n    </picture>\n  </figure>\n  </div><p></p>\n<p>What are Web Workers, you might ask. The technical definition is this:</p>\n<blockquote>\n<p>Web Workers are a simple means for web content to run scripts in background threads</p>\n<p>~ <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<p>Cool. But what does that exactly mean? Lemme explain using an example of roads and cars.</p>\n<p>Javascript is, by nature, a single threaded language. That means every process, from handling button clicks to loading an image happens in a single channel.</p>\n<p>Think of it like this. Imagine the JS process is a single lane road, and all of its processes are cars. Let's take 2 cars, one a very fast Ferrari, and other a beat up 20 year old Toyota. The Ferrari can easily blaze through at the speed of 150kmph, whereas the safe zone for the Toyota is 40kmph.</p>\n<p>If the Ferrari is behind the Toyota, it can't run up to its full speed.</p>\n<p>That is, if a very heavy process is running, it may block up other resources. They won't necessarily stop, just become slow and unresponsive.</p>\n<p>You would have experienced it sometime, when you go to a website, click a button, and it does something so heavy, the scrolling just stops temporarily, the cursor may stop moving around for a few seconds.</p>\n<p>So how do we prevent such situations? Is there a way to have the Ferrari go faster? Well there is.</p>\n<p>We'll just create another lane. The Ferrari can go into that lane, and just blaze through the road.</p>\n<p>Web Workers allow us to create that lane, or in this context, another thread.</p>\n<blockquote>\n<p>Using a Web Worker to create another thread enables us to have multiple threads. This process is called Multithreading. Here is a <a href=\"https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)\" target=\"_blank\" rel=\"noopener\"><strike>Boring</strike> Technical Definition</a>.</p>\n</blockquote>\n<h1 id=\"How-to-use-them\"><a class=\"heading-link\" href=\"blog/web-workers-intro-basic-usage#How-to-use-them\">#</a>How to use them</h1>\n<p>Using web workers is quite simple. Let's create a <code>index.js</code> file. This is where we'll initialize our worker.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">// index.js</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> worker </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #82AAFF\">Worker</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">worker.js</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>This is the bare-bones code for initializing the worker. Let's create the <code>worker.js</code></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">// worker.js</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Let's keep our worker file empty for now.</p>\n<p>Add this code to <code>index.js</code></p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">worker</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">postMessage</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">Hello</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>The <code>postMessage</code> method simply passes in a value to our web worker. Now let's recieve that value in our worker file.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #676E95\">// worker.js</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">self</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">onmessage</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #A6ACCD\">e</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #C792EA\">=&gt;</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #C792EA\">const</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">message</span><span style=\"color: #F07178\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #F07178\"> </span><span style=\"color: #A6ACCD\">e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">  </span><span style=\"color: #A6ACCD\">console</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">log</span><span style=\"color: #F07178\">(</span><span style=\"color: #A6ACCD\">message</span><span style=\"color: #F07178\">)</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>e</code> is here the event argument passed by the <code>self.onmessage</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #C792EA\">const</span><span style=\"color: #A6ACCD\"> message </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #A6ACCD\"> e</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #A6ACCD\">data</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here we are accessing the data we passed to the web worker using <code>worker.postMessage</code> method.</p>\n<p>And surely, the output comes out in the console.</p>\n<pre class=\"shiki\" style=\"background-color: #292D3E\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">&gt; Hello</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>There is no <code>window</code> global object in a Web Worker. Everything is available under <code>self</code>.</p>\n</blockquote>\n<p>That's it.</p>\n<h1 id=\"What-values-can-I-pass-into-a-worker\"><a class=\"heading-link\" href=\"blog/web-workers-intro-basic-usage#What-values-can-I-pass-into-a-worker\">#</a>What values can I pass into a worker?</h1>\n<p>Any JSON Serializable value, like</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code>,</li>\n<li><code>Object</code> (without any methods)</li>\n<li><code>Arrays</code></li>\n</ul>\n<p>What you <strong>can't</strong> pass:</p>\n<ul>\n<li><code>Function</code></li>\n<li><code>Class</code></li>\n</ul>\n<p>Though there are amazing libraries like <a href=\"https://davidea.st/articles/comlink-simple-web-worker\" target=\"_blank\" rel=\"noopener\">Comlink</a> that allows you to pass any value to a web worker. Check it out!</p>\n<p>This is it for today! Ping me on Twitter if you have any problems or simply leave a review. Link is in the footer.</p>\n<p>Thank you for reading.</p>\n","id":"web-workers-intro-basic-usage","reading_time":1.8775,"toc":[{"indent":0,"id":"","title":"How to use them","length":15},{"indent":0,"id":"","title":"What values can I pass into a worker?","length":37}]}